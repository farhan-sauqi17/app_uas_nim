/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import java.util.LinkedList;
import java.util.Queue;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sammidev
 */
public class InputData extends javax.swing.JFrame {

    Queue<Student> students = new LinkedList<Student>();

    
       private DefaultTableModel model;
    
    /**
     * Creates new form InputData
     */
    public InputData() {
        initComponents();
        model = new DefaultTableModel();
        TableRecent.setModel(model);
        
        model.addColumn("no");
        model.addColumn("nama");
        model.addColumn("nim");
        model.addColumn("jenjang");
        model.addColumn("angkatan");
        model.addColumn("fakultas");
        model.addColumn("jurusan");
        model.addColumn("kel");
        model.addColumn("noUnik");
        
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNama = new javax.swing.JTextField();
        txtNim = new javax.swing.JTextField();
        btnSimpan = new javax.swing.JButton();
        btnBatal = new javax.swing.JButton();
        btnUbah = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        dsc = new javax.swing.JButton();
        asc = new javax.swing.JButton();
        btnCari = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableRecent = new javax.swing.JTable();
        txtCari = new javax.swing.JTextField();
        dsc1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        sortBy = new javax.swing.JComboBox<>();

        jLabel1.setBackground(new java.awt.Color(153, 153, 255));
        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("INPUT DATA MAHASISWA");
        jLabel1.setOpaque(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(153, 255, 153));

        jLabel2.setBackground(new java.awt.Color(153, 153, 255));
        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("INPUT DATA MAHASISWA");
        jLabel2.setOpaque(true);

        jLabel3.setBackground(new java.awt.Color(204, 255, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("NAMA");
        jLabel3.setOpaque(true);

        jLabel4.setBackground(new java.awt.Color(204, 255, 255));
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("NIM");
        jLabel4.setOpaque(true);

        txtNim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNimActionPerformed(evt);
            }
        });

        btnSimpan.setBackground(new java.awt.Color(255, 255, 51));
        btnSimpan.setText("SIMPAN");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        btnBatal.setBackground(new java.awt.Color(255, 255, 51));
        btnBatal.setText("BATAL");
        btnBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatalActionPerformed(evt);
            }
        });

        btnUbah.setBackground(new java.awt.Color(255, 255, 0));
        btnUbah.setText("UBAH");
        btnUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUbahActionPerformed(evt);
            }
        });

        btnHapus.setBackground(new java.awt.Color(255, 255, 0));
        btnHapus.setText("HAPUS");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        dsc.setBackground(new java.awt.Color(51, 255, 204));
        dsc.setText("↓");
        dsc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dscActionPerformed(evt);
            }
        });

        asc.setBackground(new java.awt.Color(51, 255, 204));
        asc.setText("↑");
        asc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ascActionPerformed(evt);
            }
        });

        btnCari.setBackground(new java.awt.Color(51, 255, 204));
        btnCari.setText("Cari");
        btnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariActionPerformed(evt);
            }
        });

        TableRecent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "NO", "NAMA", "NIM", "JENJANG", "ANGKATAN", "FAKULTAS", "JURUSAN", "KEL", "NO UNIK"
            }
        ));
        TableRecent.setToolTipText("");
        TableRecent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableRecentMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TableRecent);

        dsc1.setBackground(new java.awt.Color(255, 255, 0));
        dsc1.setText("REFRESH");
        dsc1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dsc1ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 51, 51));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("EXIT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        sortBy.setBackground(new java.awt.Color(51, 255, 204));
        sortBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "nama", "NIM" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnSimpan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnUbah, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(txtNim, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCari, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dsc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(asc))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(175, 175, 175)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(66, 66, 66)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dsc1)
                                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(sortBy, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(2, 2, 2)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(1, 1, 1)
                        .addComponent(dsc1)))
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNim, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSimpan)
                    .addComponent(btnUbah))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBatal)
                    .addComponent(btnHapus))
                .addGap(39, 39, 39)
                .addComponent(sortBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCari, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dsc)
                    .addComponent(asc))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNimActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNimActionPerformed

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
           String nama = txtNama.getText();
           String nim = txtNim.getText();
           students.add(new Student(nama, nim));
           loadData();
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUbahActionPerformed
        int i = TableRecent.getSelectedRow();
        if (i == -1) {
            // tidak ada baris yang tedeteksi
            return;
        }
        
        String nim =  model.getValueAt(i, 2).toString();
        int index = 0;
        for (Student s : students) {
            if (s.getNim().equalsIgnoreCase(nim)) {
                break; 
            }
            index++;
        }
        
        System.out.println(nim);
        
        // cari student berdasar index
          Student s = null;
            int indexFound = 0;
            for (Student found : students) {
                if (index == indexFound) {
                    s = found;
                }
                indexFound++;
            }
        
        btnHapusActionPerformed(evt);
        btnSimpanActionPerformed(evt);
    }//GEN-LAST:event_btnUbahActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        int i = TableRecent.getSelectedRow();
        if (i == -1) {
            // tidak ada baris yang tedeteksi
            return;
        }
        
        String nim =  model.getValueAt(i, 2).toString();
        int index = 0;
        for (Student s : students) {
            if (s.getNim().equalsIgnoreCase(nim)) {
                break; 
            }
            index++;
        }
        
        System.out.println(nim);
        
        // cari student berdasar index
          Student s = null;
            int indexFound = 0;
            for (Student found : students) {
                if (index == indexFound) {
                    s = found;
                }
                indexFound++;
            }
           
        students.remove(s);
        loadData();
    }//GEN-LAST:event_btnHapusActionPerformed

    private void dscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dscActionPerformed
        // sorting by
        String sort = sortBy.getSelectedItem().toString();
        System.out.println(sort);
        
        if (sort.equalsIgnoreCase("nama")) {
            
            String str[] = new String[students.size()];
            int in = 0;
            for (Student s : students) {
                str[in] = s.getName();
                in++;
            }

            Student[] studentsAsc = new Student[students.size()];

            String temp;
            for (int j = 0; j < str.length; j++) {
               for (int i = j + 1; i < str.length; i++) {
                    // comparing adjacent strings
                    if (str[i].compareTo(str[j]) < 0) {
                            temp = str[j];
                            str[j] = str[i];
                            str[i] = temp;
                    }
               }


               studentsAsc[j] =  searchStudentByName(str[j]);
            }

            model.getDataVector().removeAllElements();
            model.fireTableDataChanged();


            int count = 1;
            Object[] o = new Object[9];
            for (Student student: studentsAsc) {
                o[0] = count;
                o[1] = student.getName();
                o[2] = student.getNim();
                o[3] = student.getJenjangPendidikan();
                o[4] = student.getAngkatan();
                o[5] = student.getFakultas();
                o[6] = student.getProdi();
                o[7] = student.getJenisKelamin();
                o[8] = student.getNoUnik();

                model.addRow(o);
                count++;
            }
        }else {
            String str[] = new String[students.size()];
            int in = 0;
            for (Student s : students) {
                str[in] = s.getNim();
                in++;
            }

            Student[] studentsAsc = new Student[students.size()];

            String temp;
            for (int j = 0; j < str.length; j++) {
               for (int i = j + 1; i < str.length; i++) {
                    // comparing adjacent strings
                    if (str[i].compareTo(str[j]) < 0) {
                            temp = str[j];
                            str[j] = str[i];
                            str[i] = temp;
                    }
               }


               studentsAsc[j] =  searchStudentByNim(str[j]);
            }

            model.getDataVector().removeAllElements();
            model.fireTableDataChanged();


            int count = 1;
            Object[] o = new Object[9];
            for (Student student: studentsAsc) {
                o[0] = count;
                o[1] = student.getName();
                o[2] = student.getNim();
                o[3] = student.getJenjangPendidikan();
                o[4] = student.getAngkatan();
                o[5] = student.getFakultas();
                o[6] = student.getProdi();
                o[7] = student.getJenisKelamin();
                o[8] = student.getNoUnik();

                model.addRow(o);
                count++;
            }
        }
  
    }//GEN-LAST:event_dscActionPerformed

    private void ascActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ascActionPerformed
    
        // sorting by
        String sort = sortBy.getSelectedItem().toString();
        System.out.println(sort);
        
        if (sort.equalsIgnoreCase("nama")) {
            
            String str[] = new String[students.size()];
            int in = 0;
            for (Student s : students) {
                str[in] = s.getName();
                in++;
            }

            Student[] studentsAsc = new Student[students.size()];

            String temp;
            for (int j = 0; j < str.length; j++) {
               for (int i = j + 1; i < str.length; i++) {
                    // comparing adjacent strings
                    if (str[i].compareTo(str[j]) < 0) {
                            temp = str[j];
                            str[j] = str[i];
                            str[i] = temp;
                    }
               }


               studentsAsc[j] =  searchStudentByName(str[j]);
            }


            Student[] studentsDsc = new Student[students.size()];
            int indexx = 0;
            for (int i = students.size()-1; i >= 0; i--) {
                studentsDsc[indexx] = studentsAsc[i];
                indexx++;
            }

            model.getDataVector().removeAllElements();
            model.fireTableDataChanged();


            int count = 1;
            Object[] o = new Object[9];
            for (Student student: studentsDsc) {
                o[0] = count;
                o[1] = student.getName();
                o[2] = student.getNim();
                o[3] = student.getJenjangPendidikan();
                o[4] = student.getAngkatan();
                o[5] = student.getFakultas();
                o[6] = student.getProdi();
                o[7] = student.getJenisKelamin();
                o[8] = student.getNoUnik();

                model.addRow(o);
                count++;
            }
        } else {
            String str[] = new String[students.size()];
            int in = 0;
            for (Student s : students) {
                str[in] = s.getNim();
                in++;
            }

            Student[] studentsAsc = new Student[students.size()];

            String temp;
            for (int j = 0; j < str.length; j++) {
               for (int i = j + 1; i < str.length; i++) {
                    // comparing adjacent strings
                    if (str[i].compareTo(str[j]) < 0) {
                            temp = str[j];
                            str[j] = str[i];
                            str[i] = temp;
                    }
               }


               studentsAsc[j] =  searchStudentByNim(str[j]);
            }


            Student[] studentsDsc = new Student[students.size()];
            int indexx = 0;
            for (int i = students.size()-1; i >= 0; i--) {
                studentsDsc[indexx] = studentsAsc[i];
                indexx++;
            }

            model.getDataVector().removeAllElements();
            model.fireTableDataChanged();


            int count = 1;
            Object[] o = new Object[9];
            for (Student student: studentsDsc) {
                o[0] = count;
                o[1] = student.getName();
                o[2] = student.getNim();
                o[3] = student.getJenjangPendidikan();
                o[4] = student.getAngkatan();
                o[5] = student.getFakultas();
                o[6] = student.getProdi();
                o[7] = student.getJenisKelamin();
                o[8] = student.getNoUnik();

                model.addRow(o);
                count++;
            }
        }
        
    }//GEN-LAST:event_ascActionPerformed

    private void btnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariActionPerformed
        String nama = txtCari.getText();    
        String names[] = new String[students.size()];
        
        int i = 0;
        for (Student s : students) {
            names[i] = s.getName();
            ++i;
        }
        
        System.out.println(nama);
        for (String s : names) {
            System.out.println(s);
        }
        
        int index = binarySearch(names, nama);
        if (index == -1) {
            JOptionPane.showMessageDialog(null, "data tidak ditemukan");
        }else {
            System.out.println(index);
            Student s = null;
            int indexFound = 0;
            for (Student found : students) {
                if (index == indexFound) {
                    s = found;
                }  
                indexFound++;
            }
            
             model.getDataVector().removeAllElements();
             model.fireTableDataChanged();
        
           Object[] o = new Object[9];
            o[0] = 1;
            o[1] = s.getName();
            o[2] = s.getNim();
            o[3] = s.getJenjangPendidikan();
            o[4] = s.getAngkatan();
            o[5] = s.getFakultas();
            o[6] = s.getProdi();
            o[7] = s.getJenisKelamin();
            o[8] = s.getNoUnik();
            
            model.addRow(o);
        }
        
    }//GEN-LAST:event_btnCariActionPerformed

    private void btnBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatalActionPerformed
        // TODO add your handling code here:
        txtNama.setText("");
        txtNim.setText("");
        txtCari.setText("");
    }//GEN-LAST:event_btnBatalActionPerformed

    private void dsc1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dsc1ActionPerformed
        // TODO add your handling code here:
        txtNama.setText("");
        txtNim.setText("");
        txtCari.setText("");
        loadData();
    }//GEN-LAST:event_dsc1ActionPerformed

    private void TableRecentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableRecentMouseClicked
        // TODO add your handling code here:
        int i = TableRecent.getSelectedRow();
                
        String name = (String) model.getValueAt(i,1);
        txtNama.setText(name);
        
        String nim = (String) model.getValueAt(i,2);
        txtNim.setText(nim);
    }//GEN-LAST:event_TableRecentMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
           System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InputData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InputData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InputData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InputData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                InputData a = new InputData();
                a.pack();
                a.setLocationRelativeTo(null);
                a.setResizable(false);
                a.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableRecent;
    private javax.swing.JButton asc;
    private javax.swing.JButton btnBatal;
    private javax.swing.JButton btnCari;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnUbah;
    private javax.swing.JButton dsc;
    private javax.swing.JButton dsc1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> sortBy;
    private javax.swing.JTextField txtCari;
    private javax.swing.JTextField txtNama;
    private javax.swing.JTextField txtNim;
    // End of variables declaration//GEN-END:variables

    private void loadData() {  
        // 11850112212
           int count = 1;
        
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        
        Object[] o = new Object[9];
        for (Student student: students) {
            o[0] = count;
            o[1] = student.getName();
            o[2] = student.getNim();
            o[3] = student.getJenjangPendidikan();
            o[4] = student.getAngkatan();
            o[5] = student.getFakultas();
            o[6] = student.getProdi();
            o[7] = student.getJenisKelamin();
            o[8] = student.getNoUnik();
            
            model.addRow(o);
            count++;
        }
    }
    
    static int binarySearch(String[] arr, String x)
    {
        for (int i = 0; i < arr.length; i++) {
            if (x.equalsIgnoreCase(arr[i])) {
                return i;
            }
        }
        
        return -1;
    }
    
    private Student searchStudentByName(String name) {
         int index = 0;
        for (Student s : students) {
            if (s.getName().equalsIgnoreCase(name)) {
                break; 
            }
            index++;
        }
        
        
        // cari student berdasar index
          Student s = null;
            int indexFound = 0;
            for (Student found : students) {
                if (index == indexFound) {
                    s = found;
                }
                indexFound++;
            }
            return s;
    }
    
    private Student searchStudentByNim(String nim) {
         int index = 0;
        for (Student s : students) {
            if (s.getNim().equalsIgnoreCase(nim)) {
                break; 
            }
            index++;
        }
        
        
        // cari student berdasar index
          Student s = null;
            int indexFound = 0;
            for (Student found : students) {
                if (index == indexFound) {
                    s = found;
                }
                indexFound++;
            }
            return s;
    }
}
